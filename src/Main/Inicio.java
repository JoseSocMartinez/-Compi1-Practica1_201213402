/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import Analisis.Lexico;
import Analisis.TablaSimbolos;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose
 */
public class Inicio extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    public static String ruta;
    public static ArrayList listaError = new ArrayList();
    public static ArrayList lexema = new ArrayList();

    public static void agregarErrorLexico(String error, int columna, int linea) {
        Token errorLexico = new Token();
        errorLexico.setError(error);
        errorLexico.setLinea(linea);
        errorLexico.setColumna(columna);
        listaError.add(errorLexico);
    }

    public static void agregarToken(String texto, int columna, int linea, String color) {
        Token errorLexico = new Token();
        errorLexico.setError(texto);
        errorLexico.setLinea(linea);
        errorLexico.setColumna(columna);
        errorLexico.setColor(color);
        lexema.add(errorLexico);
    }

    public Inicio() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Graficas/iconoInicio.png")));

        setTitle("Nuevo documento");

//                System.out.println("--------------INICIO DE COMPILACIÓN-----------------");
// try {
//    new Analisis.Lexico( new FileReader("Prueba.txt"));
//// new Analisis.Sintactico(new Analisis.Lexico( new FileReader("Prueba.txt"))).parse();
//     
// } catch (Exception ex) {//
// Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
// }//fin catch
// 
// System.out.println("----------------FIN DE COMPILACIÓN-----------------");
// 
// System.out.println(" ");
//        System.out.println(" Errores");
// for(int i=0;i<listaError.size();i++){
//     Token error=(Token)listaError.get(i);
//        System.out.println("Error="+error.getError()+" linea="+error.getLinea()+" columna="+error.getColumna());
//        
// }
//        System.out.println(" ");
//        System.out.println(" lexemas");
// for(int i=0;i<lexema.size();i++){
//     Token error=(Token)lexema.get(i);
//        System.out.println("Lexema="+error.getError()+" linea="+error.getLinea()+" columna="+error.getColumna());
//        
// }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDocumento = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemAbrir = new javax.swing.JMenuItem();
        itemNuevo = new javax.swing.JMenuItem();
        itemGuardar = new javax.swing.JMenuItem();
        itemSalir = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtDocumento.setColumns(20);
        txtDocumento.setRows(5);
        jScrollPane2.setViewportView(txtDocumento);

        jMenu1.setText("Archivo");

        itemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        itemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Graficas/iconoAbrirD.png"))); // NOI18N
        itemAbrir.setText("Abrir");
        itemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(itemAbrir);

        itemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Graficas/iconoNuevo.png"))); // NOI18N
        itemNuevo.setText("Nuevo");
        itemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(itemNuevo);

        itemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        itemGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Graficas/iconoGuardar.png"))); // NOI18N
        itemGuardar.setText("Guardar");
        itemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(itemGuardar);

        itemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        itemSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Graficas/iconoSalir.png"))); // NOI18N
        itemSalir.setText("Salir");
        itemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalirActionPerformed(evt);
            }
        });
        jMenu1.add(itemSalir);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Run");

        jMenuItem5.setText("Compilar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_itemSalirActionPerformed

    private void itemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirActionPerformed

        JFileChooser archivo = new JFileChooser();
        archivo.setVisible(true);
        int seleccion = archivo.showDialog(null, "Cargar archivo");

        if (JFileChooser.APPROVE_OPTION == seleccion) {

            //texto = "";
            // leerArchivo((String) archivo.getSelectedFile().getAbsolutePath());
            // pestania.setSelectedIndex(1);
            // btnAnalizar.setEnabled(true);
            // btnErrores.setEnabled(true);

            try {
                txtDocumento.setText("");
                BufferedReader bufer = new BufferedReader(
                        new InputStreamReader(new FileInputStream((String) archivo.getSelectedFile().getAbsolutePath())));
                //String texto = "";
                ruta = (String) archivo.getSelectedFile().getAbsolutePath();
                setTitle(archivo.getSelectedFile().getName());
                String temp = "";
                while (temp != null) {
                    temp = bufer.readLine();
                    if (temp != null) {
                        txtDocumento.append(temp + "\n");
                        temp = "";
                    } else {
                    }
//                if (temp != null) {
//                    texto = texto + " " + temp;
//                }
                }
                //System.out.println(texto);
                //limpiarTexto(texto);
                bufer.close();
            } catch (Exception ex) {
                System.err.println("Error al leer fichero desde tarjeta SD  " + ex);
            }

        }
    }//GEN-LAST:event_itemAbrirActionPerformed

    private void itemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNuevoActionPerformed
        //CrearArchivo(txtDocumento.getText(),"nuevoDocumento","cyd","C:\\Users\\Jose\\Documents\\NetBeansProjects\\Practica1C1");
        FormNuevo nuevo = new FormNuevo(this, true, txtDocumento, ruta);
        nuevo.setVisible(true);
    }//GEN-LAST:event_itemNuevoActionPerformed

    private void itemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarActionPerformed
        if (ruta != null) {
            guardarArchivo();
            JOptionPane.showMessageDialog(this, "Guardado");
        } else {
            JOptionPane.showMessageDialog(this, "No hay un documento creado para guardar " + ruta, "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemGuardarActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        listaError.clear();;
        lexema.clear();
        if (ruta != null) {
            guardarArchivo();
            compilar();

            if (listaError.size() == 0) {
                pintarEtiquetas();
            } else {
                tablaErroresLexicos("ErroresLexicos", "C:\\Users\\Jose\\Documents");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ha creado un documento");
        }




    }//GEN-LAST:event_jMenuItem5ActionPerformed

    void compilar() {
        System.out.println("--------------INICIO DE COMPILACIÓN-----------------");
        try {

            new Analisis.Lexico(new FileReader(ruta));

// new Analisis.Sintactico(new Analisis.Lexico( new FileReader("Prueba.txt"))).parse();

        } catch (Exception ex) {//
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }//fin catch

        System.out.println("----------------FIN DE COMPILACIÓN-----------------");

        System.out.println(" ");
        System.out.println(" Errores");
        for (int i = 0; i < listaError.size(); i++) {
            Token error = (Token) listaError.get(i);
            System.out.println("Error=" + error.getError() + " linea=" + error.getLinea() + " columna=" + error.getColumna());

        }
        System.out.println(" ");
        System.out.println(" lexemas");
        for (int i = 0; i < lexema.size(); i++) {
            Token error = (Token) lexema.get(i);
            System.out.println("Lexema=" + error.getError() + " linea=" + error.getLinea() + " columna=" + error.getColumna() + " color=" + error.getColor());

        }
    }

    public void tablaErroresLexicos(String nombreArchivo, String directorio) {
        // Reporte de errores lexicos unicamente			      

        String reporteErrores = "TablaErrores_" + nombreArchivo + ".html";

        try {
            FileWriter archivo = new FileWriter(reporteErrores);
            PrintWriter escritura = new PrintWriter(archivo);

            escritura.println("<html>");
            escritura.println("<body>");
            escritura.println("<h1><center>Errores lexicos</center></h1>");
            escritura.println("<br><br>");
            escritura.println("<style>");
            escritura.println(".data-table {");
            escritura.println("border-collapse: collapse;");
            escritura.println("}");
            escritura.println(".border-bottom {");
            escritura.println("border-bottom: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-left {");
            escritura.println("border-left: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-right {");
            escritura.println("border-right: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-top {");
            escritura.println("border-top: 1px solid #000;");
            escritura.println("}");
            escritura.println("</style>");
            escritura.println("<center>");
            escritura.println("<table class=\"data-table\" WIDTH=800>");
            escritura.println("<tr>");
            escritura.println("<th class=\"border-top border-bottom border-left border-right\">No.</th>");
            escritura.println("<th class=\"border-top border-bottom border-right\">Errorruta</th>");
            escritura.println("<th class=\"border-top border-bottom border-right\">Fila</th>");
            escritura.println("<th class=\"border-top border-bottom border-right\">Columna</th>");
            escritura.println("</tr>");

            for (int i = 0; i < listaError.size(); i++) {
                Token consul = (Token) listaError.get(i);
                escritura.println("<tr>");

                //añadir las variables que se imprimiran
                escritura.println("<th class=\"border-bottom border-left border-right\">" + i + "</th>");
                escritura.println("<th class=\"border-bottom border-right\"><font color=\"#FF0000\">" + consul.getError() + "</th>");
                escritura.println("<th class=\"border-bottom border-right\">" + consul.getLinea() + "</th>");
                escritura.println("<th class=\"border-bottom border-right\">" + consul.getColumna() + "</th>");

                escritura.println("</tr>");
            }

            escritura.println("</table>");
            escritura.println("</center>");
            escritura.println("</body>");
            escritura.println("</html>");

            //nos aseguramos de cerrar el archivo
            archivo.close();


            JOptionPane.showMessageDialog(this, "Documento generado exitosamente");

            File file = new File(reporteErrores);
            Desktop.getDesktop().open(file);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo crear reporte");
        }
    }

    public void pintarEtiquetas() {
        // Reporte de errores lexicos unicamente			      

        String reporteErrores = "Etiquetas" + ".html";

        try {
            FileWriter archivo = new FileWriter(reporteErrores);
            PrintWriter escritura = new PrintWriter(archivo);

            escritura.println("<html>");
            escritura.println("<body>");
            escritura.println("<h1><center>Archivo de entrada</center></h1>");
            escritura.println("<br><br>");
            escritura.println("<style>");
            escritura.println(".data-table {");
            escritura.println("border-collapse: collapse;");
            escritura.println("}");
            escritura.println(".border-bottom {");
            escritura.println("border-bottom: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-left {");
            escritura.println("border-left: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-right {");
            escritura.println("border-right: 1px solid #000;");
            escritura.println("}");
            escritura.println(".border-top {");
            escritura.println("border-top: 1px solid #000;");
            escritura.println("}");
            escritura.println("</style>");
            //escritura.println("<center>");
            // escritura.println("<table class=\"data-table\" WIDTH=800>");
            // escritura.println("<tr>");
            //  escritura.println("<th class=\"border-top border-bottom border-left border-right\">No.</th>");
            //  escritura.println("<th class=\"border-top border-bottom border-right\">Lexema</th>");            
            // escritura.println("<th class=\"border-top border-bottom border-right\">Fila</th>");
            // escritura.println("<th class=\"border-top border-bottom border-right\">Columna</th>");
            //escritura.println("</tr>");
            int linea = 0;
            //escritura.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            for (int i = 0; i < lexema.size(); i++) {
                Token etiqueta = (Token) lexema.get(i);
                escritura.println("<tr>");
                if (etiqueta.getLinea() == linea) {
                } else {
                    // escritura.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
                    escritura.println("<br>");
                    linea++;
                    for (int j = 0; j < etiqueta.getColumna() * 4; j++) {
                        escritura.println("&nbsp;");
                    }
                }
                //añadir las variables que se imprimiran
                // escritura.println("<th class=\"border-bottom border-left border-right\">"+i+"</th>");
                //escritura.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
                escritura.println("<th class=\"border-bottom border-right\"><font color=\"" + etiqueta.getColor() + "\">" + etiqueta.getError() + "</th>");


                //  escritura.println("<th class=\"border-bottom border-right\">"+etiqueta.getLinea()+"</th>");
                //escritura.println("<th class=\"border-bottom border-right\">"+etiqueta.getColumna()+"</th>");

                escritura.println("</tr>");
            }

            //escritura.println("</table>");
            //escritura.println("</center>");
            escritura.println("</body>");
            escritura.println("</html>");

            //nos aseguramos de cerrar el archivo
            archivo.close();


            JOptionPane.showMessageDialog(this, "Documento generado exitosamente");

            File file = new File(reporteErrores);
            Desktop.getDesktop().open(file);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo crear reporte");
        }
    }

    public void guardarArchivo() {
        File f;
        FileWriter escritor;
        try {
            f = new File(ruta);
            escritor = new FileWriter(f);
            BufferedWriter bf = new BufferedWriter(escritor);
            PrintWriter salida = new PrintWriter(bf);
            salida.write(txtDocumento.getText());
            salida.close();
            bf.close();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "No se pudo guardar el documento");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAbrir;
    private javax.swing.JMenuItem itemGuardar;
    private javax.swing.JMenuItem itemNuevo;
    private javax.swing.JMenuItem itemSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtDocumento;
    // End of variables declaration//GEN-END:variables
}
