//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------
package Analisis;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20141202 (SVN rev 60) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return TablaSimbolos.class;
    }

    /**
     * Default constructor.
     */
    public Sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }
    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
        "\000\007\000\002\002\004\000\002\002\006\000\002\004"
        + "\005\000\002\005\006\000\002\006\005\000\002\010\005"
        + "\000\002\011\013"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }
    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
        "\000\035\000\004\004\005\001\002\000\004\002\037\001"
        + "\002\000\004\006\007\001\002\000\004\010\012\001\002"
        + "\000\004\022\010\001\002\000\004\007\011\001\002\000"
        + "\004\010\uffff\001\002\000\004\012\016\001\002\000\004"
        + "\005\014\001\002\000\004\002\000\001\002\000\004\014"
        + "\022\001\002\000\004\026\017\001\002\000\004\013\020"
        + "\001\002\000\004\014\ufffd\001\002\000\004\011\036\001"
        + "\002\000\004\012\024\001\002\000\004\015\035\001\002"
        + "\000\004\026\025\001\002\000\004\013\026\001\002\000"
        + "\004\016\027\001\002\000\004\026\030\001\002\000\004"
        + "\017\031\001\002\000\004\020\032\001\002\000\004\023"
        + "\033\001\002\000\004\021\034\001\002\000\004\015\ufffb"
        + "\001\002\000\004\011\ufffc\001\002\000\004\005\ufffe\001"
        + "\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }
    /**
     * <
     * code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
        "\000\035\000\004\002\003\001\001\000\002\001\001\000"
        + "\004\004\005\001\001\000\004\005\012\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\006"
        + "\014\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\010\020\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\011\022\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + ""});

    /**
     * Access to
     * <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }
    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <
     * code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <
     * code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * Metodo al que se llama automáticamente ante algún error sintactico.
     */
    public void syntax_error(Symbol s) {
        System.out.println("Error en la Línea " + (s.right + 1) + " Columna " + s.left + ". Identificador " + s.value + " reconocido.");
    }

    /**
     * Metodo al que se llama en el momento en que ya no es posible una
     * recuperación de errores.
     */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error en la Línea " + (s.right + 1) + "Columna " + s.left + ". Identificador " + s.value + " no reconocido.");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintactico$actions {

        private final Sintactico parser;

        /**
         * Constructor
         */
        CUP$Sintactico$actions(Sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
                int CUP$Sintactico$act_num,
                java_cup.runtime.lr_parser CUP$Sintactico$parser,
                java.util.Stack CUP$Sintactico$stack,
                int CUP$Sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintactico$result;

            /* select the action based on the action number */
            switch (CUP$Sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIA EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintactico$parser.done_parsing();
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIA ::= iestructura DIR CARP festructura 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIA", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // DIR ::= idirectorio tdirectorio fdirectorio 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIR", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // CARP ::= icarpeta NCARP DOC fcarpeta 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARP", 3, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // NCARP ::= inombre talfanumerico fnombre 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NCARP", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // DOC ::= idocumento NDOC fdocumento 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOC", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // NDOC ::= inombre talfanumerico fnombre iformato talfanumerico fformato icontenido tcontenido fcontenido 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NDOC", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintactico$act_num + "found in internal parse table");

            }
        } /* end of method */


        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
                int CUP$Sintactico$act_num,
                java_cup.runtime.lr_parser CUP$Sintactico$parser,
                java.util.Stack CUP$Sintactico$stack,
                int CUP$Sintactico$top)
                throws java.lang.Exception {
            return CUP$Sintactico$do_action_part00000000(
                    CUP$Sintactico$act_num,
                    CUP$Sintactico$parser,
                    CUP$Sintactico$stack,
                    CUP$Sintactico$top);
        }
    }
}
